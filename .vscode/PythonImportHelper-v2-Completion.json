[
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Word",
        "kind": 6,
        "importPath": "templates.models",
        "description": "templates.models",
        "peekOfCode": "class Word(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    vocabulary = db.Column(db.String(100), nullable=False)\n    translation = db.Column(db.String(100), nullable=False)\n    part_of_speech = db.Column(db.String(50), nullable=False)\n    def to_dict(self):\n        return {\n            'id': self.id,\n            'vocabulary': self.vocabulary,\n            'translation': self.translation,",
        "detail": "templates.models",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "templates.models",
        "description": "templates.models",
        "peekOfCode": "db = SQLAlchemy()\nclass Word(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    vocabulary = db.Column(db.String(100), nullable=False)\n    translation = db.Column(db.String(100), nullable=False)\n    part_of_speech = db.Column(db.String(50), nullable=False)\n    def to_dict(self):\n        return {\n            'id': self.id,\n            'vocabulary': self.vocabulary,",
        "detail": "templates.models",
        "documentation": {}
    },
    {
        "label": "Drink",
        "kind": 6,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "class Drink(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(100), nullable=False)\n    toppings = db.Column(db.String(200), nullable=False)\n    sugar_level = db.Column(db.String(50), nullable=False)\n    ice_level = db.Column(db.String(50), nullable=False)\n    def __repr__(self):\n        return f\"<Drink {self.title}>\"\n# 初始化資料庫（如果尚未建立）\nwith app.app_context():",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def index():\n    return render_template('index.html')\n@app.route('/submit', methods=['POST'])\ndef submit():\n    title = request.form.get('title')\n    toppings = request.form.get('toppings')\n    sugar_level = request.form.get('sugar_level')\n    ice_level = request.form.get('ice_level')\n    # 新增飲料到資料庫\n    new_drink = Drink(",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "submit",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def submit():\n    title = request.form.get('title')\n    toppings = request.form.get('toppings')\n    sugar_level = request.form.get('sugar_level')\n    ice_level = request.form.get('ice_level')\n    # 新增飲料到資料庫\n    new_drink = Drink(\n        title=title,\n        toppings=toppings,\n        sugar_level=sugar_level,",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "result",
        "kind": 2,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "def result():\n    # 取得所有飲料資料\n    drinks = Drink.query.all()\n    return render_template('result.html', drinks=drinks)\nif __name__ == '__main__':\n    app.run(debug=True)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app = Flask(__name__)\n# 配置 SQLite 資料庫路徑\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///mystery_drinks.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n# 初始化資料庫\ndb = SQLAlchemy(app)\n# 定義資料庫模型\nclass Drink(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(100), nullable=False)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_DATABASE_URI']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///mystery_drinks.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n# 初始化資料庫\ndb = SQLAlchemy(app)\n# 定義資料庫模型\nclass Drink(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(100), nullable=False)\n    toppings = db.Column(db.String(200), nullable=False)\n    sugar_level = db.Column(db.String(50), nullable=False)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS']",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\n# 初始化資料庫\ndb = SQLAlchemy(app)\n# 定義資料庫模型\nclass Drink(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(100), nullable=False)\n    toppings = db.Column(db.String(200), nullable=False)\n    sugar_level = db.Column(db.String(50), nullable=False)\n    ice_level = db.Column(db.String(50), nullable=False)",
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "app",
        "description": "app",
        "peekOfCode": "db = SQLAlchemy(app)\n# 定義資料庫模型\nclass Drink(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(100), nullable=False)\n    toppings = db.Column(db.String(200), nullable=False)\n    sugar_level = db.Column(db.String(50), nullable=False)\n    ice_level = db.Column(db.String(50), nullable=False)\n    def __repr__(self):\n        return f\"<Drink {self.title}>\"",
        "detail": "app",
        "documentation": {}
    }
]